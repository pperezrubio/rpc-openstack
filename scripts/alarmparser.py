# Rackspace Monitoring as a Service (MaaS) Alarm Languague parser.

# Generated by the Waxeye Parser Generator - version 0.8.0
# www.waxeye.org

# Generated from the following grammar (retrieved from
# https://github.rackspace.com/CloudMonitoring/ele/blob/master/grammar/alarm.waxeye)

# AlarmDsl      <- Ws *SetStatement Ws *IfStatement Ws *Return
#
#
# MetricName    <- :'metric[' ( ( :'"' Name :'"' ) | ( :"'" Name :"'" ) ) :']'
#
# Param        <- Ws (MetricName | Number) Ws
# FunctionName <- +([a-zA-Z_])
#
# Metric       <= FunctionName :'(' ( Param | Param *( :',' Ws Param ) ) :')'
#                 | MetricName
#
#
# Name          <- +([a-zA-Z_-]
#                  | ' ' 
#                  | [0-9]
#                  | '.' 
#                  | '/')
#
#
# InExp         <= Metric Ws Rhs
#
# Rhs           <- NOp Ws NValue
#                | TOp Ws TValue
#                | CTOp Ws String
#
# CondExp       <= Ws (:'(' Ws InExp Ws :')'
#                  |  InExp ) Ws
#
# Conj          <- "&&" 
#                  | "||"
#
# IfStatement   <- :'if' Ws
#                  :'(' Ws CondExp 
#                  *(Conj Ws CondExp) 
#                  :')' Ws Block Ws
#
# Block         <- :'{' Ws Return Ws :'}'
#
# # Number comparators
# NValue         <- Number
#                   | Metric
#
# # Text metrics, not the same comparators
# TValue       <- String
#                 | Metric
#
# String   <- ( :'"'
#               *( :'\\' ( Unicode | Escaped )
#               | !'\\' !'"' . )
#               :'"' )
#             |
#             ( :"'"
#               *( :'\\' ( Unicode | Escaped )
#               | !'\\' !"'" . )
#               :"'" )
#
#
# Unicode <- 'u' [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F]
#
# Escaped <- ["'/\\bfnrt]
#
# Number  <- ?'-'
#            ('0' | [1-9] *[0-9])
#            ?('.' +[0-9])
#            ?([eE] ?[+-] +[0-9])
#
# WholeNumber <- [1-9] *[0-9]
#
# AlarmStatusArgs <- AlertStates ?( Ws :',' Ws AlertStateReason )
#
# DeprecatedAlarmStatus <- AlarmStatusArgs
#
# AlarmStatus <- :'new' Ws :'AlarmStatus(' Ws AlarmStatusArgs Ws :')' Ws :';'
#
# Return        <- :'return ' Ws ( AlarmStatus | DeprecatedAlarmStatus ) Ws
#
# AlertStates   <- 'CRITICAL'
#                  | 'OK'
#                  | 'WARNING'
#
# AlertStateReason <- String
#
# # Number operators that take metric or constant numbers on both sides
# NOp            <- ('>='
#                   | '<='
#                   | '>'
#                   | '<'
#                   | '=='
#                   | '!=') Ws
#
# # Text operators that take metric or constant strings on both sides
# TOp         <- ('==' | '!=') Ws
#
# # Text operators that only take constant strings on the rhs
# CTOp         <- ('nregex' | 'regex') Ws
#
#
# SetStatement    <- :':set' Ws InSetStatement Ws
#
#
# InSetStatement  <= SetConsistencyLevel
#                    | SetConsecutiveCount
#                    | SetDimensionFilter
#
#
# ConsistencyLevel <- 'ONE'
#                     | 'QUORUM'
#                     | 'ALL'
#
#
# # Should these just be on the alarm itself?
# # Like check type filtering...
# SetConsistencyLevel  <- :'consistencyLevel' Ws :'=' Ws ConsistencyLevel
#
# SetConsecutiveCount  <- :'consecutiveCount' Ws :'=' Ws WholeNumber
#
# # We just parse out a string here, then validate it later so we can provide an
# # actually useful error message.
# SetDimensionFilter   <- :'dimensionFilter' Ws :'=' Ws String
#
#
# SComment      <: '#' *(!EndOfLine .) (EndOfLine | !.)
#
#
# MComment      <: '/*' *(MComment | !'*/' . ) '*/'
#
#
# EndOfLine     <: '\r\n' | '\n' | '\r'
#
# Wsp           <: *[ \t]
#
# Ws            <: *(EndOfLine | SComment | MComment | [ \t])

from waxeye import Edge, State, FA, WaxeyeParser

class Parser (WaxeyeParser):
    start = 0
    eof_check = True
    automata = [FA("alarmDsl", [State([Edge(38, 1, False)], False),
            State([Edge(28, 1, False),
                Edge(38, 2, False)], False),
            State([Edge(10, 2, False),
                Edge(38, 3, False)], False),
            State([Edge(22, 3, False)], True)], FA.LEFT),
        FA("metricName", [State([Edge("m", 1, True)], False),
            State([Edge("e", 2, True)], False),
            State([Edge("t", 3, True)], False),
            State([Edge("r", 4, True)], False),
            State([Edge("i", 5, True)], False),
            State([Edge("c", 6, True)], False),
            State([Edge("[", 7, True)], False),
            State([Edge("\"", 8, True),
                Edge("\'", 12, True)], False),
            State([Edge(5, 9, False)], False),
            State([Edge("\"", 10, True)], False),
            State([Edge("]", 11, True)], False),
            State([], True),
            State([Edge(5, 13, False)], False),
            State([Edge("\'", 10, True)], False)], FA.LEFT),
        FA("param", [State([Edge(38, 1, False)], False),
            State([Edge(1, 2, False),
                Edge(17, 2, False)], False),
            State([Edge(38, 3, False)], False),
            State([], True)], FA.LEFT),
        FA("functionName", [State([Edge([(65, 90), "_", (97, 122)], 1, False)], False),
            State([Edge([(65, 90), "_", (97, 122)], 1, False)], True)], FA.LEFT),
        FA("metric", [State([Edge(3, 1, False),
                Edge(1, 4, False)], False),
            State([Edge("(", 2, True)], False),
            State([Edge(2, 3, False)], False),
            State([Edge(")", 4, True),
                Edge(",", 5, True)], False),
            State([], True),
            State([Edge(38, 6, False)], False),
            State([Edge(2, 7, False)], False),
            State([Edge(",", 5, True),
                Edge(")", 4, True)], False)], FA.PRUNE),
        FA("name", [State([Edge(["-", (65, 90), "_", (97, 122)], 1, False),
                Edge(" ", 1, False),
                Edge([(48, 57)], 1, False),
                Edge(".", 1, False),
                Edge("/", 1, False)], False),
            State([Edge(["-", (65, 90), "_", (97, 122)], 1, False),
                Edge(" ", 1, False),
                Edge([(48, 57)], 1, False),
                Edge(".", 1, False),
                Edge("/", 1, False)], True)], FA.LEFT),
        FA("inExp", [State([Edge(4, 1, False)], False),
            State([Edge(38, 2, False)], False),
            State([Edge(7, 3, False)], False),
            State([], True)], FA.PRUNE),
        FA("rhs", [State([Edge(25, 1, False),
                Edge(26, 4, False),
                Edge(27, 6, False)], False),
            State([Edge(38, 2, False)], False),
            State([Edge(12, 3, False)], False),
            State([], True),
            State([Edge(38, 5, False)], False),
            State([Edge(13, 3, False)], False),
            State([Edge(38, 7, False)], False),
            State([Edge(14, 3, False)], False)], FA.LEFT),
        FA("condExp", [State([Edge(38, 1, False)], False),
            State([Edge("(", 2, True),
                Edge(6, 6, False)], False),
            State([Edge(38, 3, False)], False),
            State([Edge(6, 4, False)], False),
            State([Edge(38, 5, False)], False),
            State([Edge(")", 6, True)], False),
            State([Edge(38, 7, False)], False),
            State([], True)], FA.PRUNE),
        FA("conj", [State([Edge("&", 1, False),
                Edge("|", 3, False)], False),
            State([Edge("&", 2, False)], False),
            State([], True),
            State([Edge("|", 2, False)], False)], FA.LEFT),
        FA("ifStatement", [State([Edge("i", 1, True)], False),
            State([Edge("f", 2, True)], False),
            State([Edge(38, 3, False)], False),
            State([Edge("(", 4, True)], False),
            State([Edge(38, 5, False)], False),
            State([Edge(8, 6, False)], False),
            State([Edge(9, 7, False),
                Edge(")", 9, True)], False),
            State([Edge(38, 8, False)], False),
            State([Edge(8, 6, False)], False),
            State([Edge(38, 10, False)], False),
            State([Edge(11, 11, False)], False),
            State([Edge(38, 12, False)], False),
            State([], True)], FA.LEFT),
        FA("block", [State([Edge("{", 1, True)], False),
            State([Edge(38, 2, False)], False),
            State([Edge(22, 3, False)], False),
            State([Edge(38, 4, False)], False),
            State([Edge("}", 5, True)], False),
            State([], True)], FA.LEFT),
        FA("nValue", [State([Edge(17, 1, False),
                Edge(4, 1, False)], False),
            State([], True)], FA.LEFT),
        FA("tValue", [State([Edge(14, 1, False),
                Edge(4, 1, False)], False),
            State([], True)], FA.LEFT),
        FA("string", [State([Edge("\"", 1, True),
                Edge("\'", 6, True)], False),
            State([Edge("\\", 2, True),
                Edge(40, 3, False),
                Edge("\"", 5, True)], False),
            State([Edge(15, 1, False),
                Edge(16, 1, False)], False),
            State([Edge(39, 4, False)], False),
            State([Edge(-1, 1, False)], False),
            State([], True),
            State([Edge("\\", 7, True),
                Edge(42, 8, False),
                Edge("\'", 5, True)], False),
            State([Edge(15, 6, False),
                Edge(16, 6, False)], False),
            State([Edge(41, 9, False)], False),
            State([Edge(-1, 6, False)], False)], FA.LEFT),
        FA("unicode", [State([Edge("u", 1, False)], False),
            State([Edge([(48, 57), (65, 70), (97, 102)], 2, False)], False),
            State([Edge([(48, 57), (65, 70), (97, 102)], 3, False)], False),
            State([Edge([(48, 57), (65, 70), (97, 102)], 4, False)], False),
            State([Edge([(48, 57), (65, 70), (97, 102)], 5, False)], False),
            State([], True)], FA.LEFT),
        FA("escaped", [State([Edge(["\"", "\'", "/", "\\", "b", "f", "n", "r", "t"], 1, False)], False),
            State([], True)], FA.LEFT),
        FA("number", [State([Edge("-", 1, False),
                Edge("0", 2, False),
                Edge([(49, 57)], 8, False)], False),
            State([Edge("0", 2, False),
                Edge([(49, 57)], 8, False)], False),
            State([Edge(".", 3, False),
                Edge(["E", "e"], 5, False)], True),
            State([Edge([(48, 57)], 4, False)], False),
            State([Edge([(48, 57)], 4, False),
                Edge(["E", "e"], 5, False)], True),
            State([Edge(["+", "-"], 6, False),
                Edge([(48, 57)], 7, False)], False),
            State([Edge([(48, 57)], 7, False)], False),
            State([Edge([(48, 57)], 7, False)], True),
            State([Edge([(48, 57)], 8, False),
                Edge(".", 3, False),
                Edge(["E", "e"], 5, False)], True)], FA.LEFT),
        FA("wholeNumber", [State([Edge([(49, 57)], 1, False)], False),
            State([Edge([(48, 57)], 1, False)], True)], FA.LEFT),
        FA("alarmStatusArgs", [State([Edge(23, 1, False)], False),
            State([Edge(38, 2, False)], True),
            State([Edge(",", 3, True)], False),
            State([Edge(38, 4, False)], False),
            State([Edge(24, 5, False)], False),
            State([], True)], FA.LEFT),
        FA("deprecatedAlarmStatus", [State([Edge(19, 1, False)], False),
            State([], True)], FA.LEFT),
        FA("alarmStatus", [State([Edge("n", 1, True)], False),
            State([Edge("e", 2, True)], False),
            State([Edge("w", 3, True)], False),
            State([Edge(38, 4, False)], False),
            State([Edge("A", 5, True)], False),
            State([Edge("l", 6, True)], False),
            State([Edge("a", 7, True)], False),
            State([Edge("r", 8, True)], False),
            State([Edge("m", 9, True)], False),
            State([Edge("S", 10, True)], False),
            State([Edge("t", 11, True)], False),
            State([Edge("a", 12, True)], False),
            State([Edge("t", 13, True)], False),
            State([Edge("u", 14, True)], False),
            State([Edge("s", 15, True)], False),
            State([Edge("(", 16, True)], False),
            State([Edge(38, 17, False)], False),
            State([Edge(19, 18, False)], False),
            State([Edge(38, 19, False)], False),
            State([Edge(")", 20, True)], False),
            State([Edge(38, 21, False)], False),
            State([Edge(";", 22, True)], False),
            State([], True)], FA.LEFT),
        FA("return", [State([Edge("r", 1, True)], False),
            State([Edge("e", 2, True)], False),
            State([Edge("t", 3, True)], False),
            State([Edge("u", 4, True)], False),
            State([Edge("r", 5, True)], False),
            State([Edge("n", 6, True)], False),
            State([Edge(" ", 7, True)], False),
            State([Edge(38, 8, False)], False),
            State([Edge(21, 9, False),
                Edge(20, 9, False)], False),
            State([Edge(38, 10, False)], False),
            State([], True)], FA.LEFT),
        FA("alertStates", [State([Edge("C", 1, False),
                Edge("O", 9, False),
                Edge("W", 10, False)], False),
            State([Edge("R", 2, False)], False),
            State([Edge("I", 3, False)], False),
            State([Edge("T", 4, False)], False),
            State([Edge("I", 5, False)], False),
            State([Edge("C", 6, False)], False),
            State([Edge("A", 7, False)], False),
            State([Edge("L", 8, False)], False),
            State([], True),
            State([Edge("K", 8, False)], False),
            State([Edge("A", 11, False)], False),
            State([Edge("R", 12, False)], False),
            State([Edge("N", 13, False)], False),
            State([Edge("I", 14, False)], False),
            State([Edge("N", 15, False)], False),
            State([Edge("G", 8, False)], False)], FA.LEFT),
        FA("alertStateReason", [State([Edge(14, 1, False)], False),
            State([], True)], FA.LEFT),
        FA("nOp", [State([Edge(">", 1, False),
                Edge("<", 4, False),
                Edge(">", 2, False),
                Edge("<", 2, False),
                Edge("=", 5, False),
                Edge("!", 6, False)], False),
            State([Edge("=", 2, False)], False),
            State([Edge(38, 3, False)], False),
            State([], True),
            State([Edge("=", 2, False)], False),
            State([Edge("=", 2, False)], False),
            State([Edge("=", 2, False)], False)], FA.LEFT),
        FA("tOp", [State([Edge("=", 1, False),
                Edge("!", 4, False)], False),
            State([Edge("=", 2, False)], False),
            State([Edge(38, 3, False)], False),
            State([], True),
            State([Edge("=", 2, False)], False)], FA.LEFT),
        FA("cTOp", [State([Edge("n", 1, False),
                Edge("r", 8, False)], False),
            State([Edge("r", 2, False)], False),
            State([Edge("e", 3, False)], False),
            State([Edge("g", 4, False)], False),
            State([Edge("e", 5, False)], False),
            State([Edge("x", 6, False)], False),
            State([Edge(38, 7, False)], False),
            State([], True),
            State([Edge("e", 9, False)], False),
            State([Edge("g", 10, False)], False),
            State([Edge("e", 11, False)], False),
            State([Edge("x", 6, False)], False)], FA.LEFT),
        FA("setStatement", [State([Edge(":", 1, True)], False),
            State([Edge("s", 2, True)], False),
            State([Edge("e", 3, True)], False),
            State([Edge("t", 4, True)], False),
            State([Edge(38, 5, False)], False),
            State([Edge(29, 6, False)], False),
            State([Edge(38, 7, False)], False),
            State([], True)], FA.LEFT),
        FA("inSetStatement", [State([Edge(31, 1, False),
                Edge(32, 1, False),
                Edge(33, 1, False)], False),
            State([], True)], FA.PRUNE),
        FA("consistencyLevel", [State([Edge("O", 1, False),
                Edge("Q", 4, False),
                Edge("A", 9, False)], False),
            State([Edge("N", 2, False)], False),
            State([Edge("E", 3, False)], False),
            State([], True),
            State([Edge("U", 5, False)], False),
            State([Edge("O", 6, False)], False),
            State([Edge("R", 7, False)], False),
            State([Edge("U", 8, False)], False),
            State([Edge("M", 3, False)], False),
            State([Edge("L", 10, False)], False),
            State([Edge("L", 3, False)], False)], FA.LEFT),
        FA("setConsistencyLevel", [State([Edge("c", 1, True)], False),
            State([Edge("o", 2, True)], False),
            State([Edge("n", 3, True)], False),
            State([Edge("s", 4, True)], False),
            State([Edge("i", 5, True)], False),
            State([Edge("s", 6, True)], False),
            State([Edge("t", 7, True)], False),
            State([Edge("e", 8, True)], False),
            State([Edge("n", 9, True)], False),
            State([Edge("c", 10, True)], False),
            State([Edge("y", 11, True)], False),
            State([Edge("L", 12, True)], False),
            State([Edge("e", 13, True)], False),
            State([Edge("v", 14, True)], False),
            State([Edge("e", 15, True)], False),
            State([Edge("l", 16, True)], False),
            State([Edge(38, 17, False)], False),
            State([Edge("=", 18, True)], False),
            State([Edge(38, 19, False)], False),
            State([Edge(30, 20, False)], False),
            State([], True)], FA.LEFT),
        FA("setConsecutiveCount", [State([Edge("c", 1, True)], False),
            State([Edge("o", 2, True)], False),
            State([Edge("n", 3, True)], False),
            State([Edge("s", 4, True)], False),
            State([Edge("e", 5, True)], False),
            State([Edge("c", 6, True)], False),
            State([Edge("u", 7, True)], False),
            State([Edge("t", 8, True)], False),
            State([Edge("i", 9, True)], False),
            State([Edge("v", 10, True)], False),
            State([Edge("e", 11, True)], False),
            State([Edge("C", 12, True)], False),
            State([Edge("o", 13, True)], False),
            State([Edge("u", 14, True)], False),
            State([Edge("n", 15, True)], False),
            State([Edge("t", 16, True)], False),
            State([Edge(38, 17, False)], False),
            State([Edge("=", 18, True)], False),
            State([Edge(38, 19, False)], False),
            State([Edge(18, 20, False)], False),
            State([], True)], FA.LEFT),
        FA("setDimensionFilter", [State([Edge("d", 1, True)], False),
            State([Edge("i", 2, True)], False),
            State([Edge("m", 3, True)], False),
            State([Edge("e", 4, True)], False),
            State([Edge("n", 5, True)], False),
            State([Edge("s", 6, True)], False),
            State([Edge("i", 7, True)], False),
            State([Edge("o", 8, True)], False),
            State([Edge("n", 9, True)], False),
            State([Edge("F", 10, True)], False),
            State([Edge("i", 11, True)], False),
            State([Edge("l", 12, True)], False),
            State([Edge("t", 13, True)], False),
            State([Edge("e", 14, True)], False),
            State([Edge("r", 15, True)], False),
            State([Edge(38, 16, False)], False),
            State([Edge("=", 17, True)], False),
            State([Edge(38, 18, False)], False),
            State([Edge(14, 19, False)], False),
            State([], True)], FA.LEFT),
        FA("sComment", [State([Edge("#", 1, False)], False),
            State([Edge(44, 2, False),
                Edge(36, 3, False),
                Edge(43, 3, False)], False),
            State([Edge(-1, 1, False)], False),
            State([], True)], FA.VOID),
        FA("mComment", [State([Edge("/", 1, False)], False),
            State([Edge("*", 2, False)], False),
            State([Edge(35, 2, False),
                Edge(45, 3, False),
                Edge("*", 4, False)], False),
            State([Edge(-1, 2, False)], False),
            State([Edge("/", 5, False)], False),
            State([], True)], FA.VOID),
        FA("endOfLine", [State([Edge("\r", 1, False),
                Edge("\n", 2, False),
                Edge("\r", 2, False)], False),
            State([Edge("\n", 2, False)], False),
            State([], True)], FA.VOID),
        FA("wsp", [State([Edge(["\t", " "], 0, False)], True)], FA.VOID),
        FA("ws", [State([Edge(36, 0, False),
                Edge(34, 0, False),
                Edge(35, 0, False),
                Edge(["\t", " "], 0, False)], True)], FA.VOID),
        FA("", [State([Edge("\"", 1, False)], False),
            State([], True)], FA.NEG),
        FA("", [State([Edge("\\", 1, False)], False),
            State([], True)], FA.NEG),
        FA("", [State([Edge("\'", 1, False)], False),
            State([], True)], FA.NEG),
        FA("", [State([Edge("\\", 1, False)], False),
            State([], True)], FA.NEG),
        FA("", [State([Edge(-1, 1, False)], False),
            State([], True)], FA.NEG),
        FA("", [State([Edge(36, 1, False)], False),
            State([], True)], FA.NEG),
        FA("", [State([Edge("*", 1, False)], False),
            State([Edge("/", 2, False)], False),
            State([], True)], FA.NEG)]

    def __init__(self):
        WaxeyeParser.__init__(self, Parser.start, Parser.eof_check, Parser.automata)

